---
#- name: pull ES image
#  command: docker pull docker-registry.local/elasticsearch

- name: install modules required for http checks
  apt: name={{ item }}
  with_items:
    - python-httplib2
  tags:
    - docker
    - es

- name: create ext volume
  file: state=directory path={{ ext_elasticsearch_volume }}
  tags:
    - docker
    - es

- name: put ES config
  template: src=elasticsearch.yml dest={{ ext_elasticsearch_volume }}/elasticsearch.yml
  register: es_config
  tags:
    - docker
    - es

- name: check container status
  shell: "docker inspect elasticsearch"
  register: container_status
  ignore_errors: True

- name: kill container
  shell: "docker stop --time=1800 elasticsearch && docker rm elasticsearch"
  when: (es_config.changed or '"exited"' in container_status.stdout) and not 'No such image, container or task' in container_status.stdout
    
- name: start Elasticsearch container
  command: docker run -d \
      -p "{{ es_listen_address + ':' if es_listen_address is defined else '' }}9200:9200" \
      -p "{{ es_listen_address + ':' if es_listen_address is defined else '' }}9300:9300" \
      --dns "192.168.160.1" \
      --volume="{{ ext_elasticsearch_volume }}:/data" \
      --volume="{{ ext_elasticsearch_volume }}/elasticsearch.yml:/elasticsearch/config/elasticsearch.yml" \
      --name="elasticsearch" \
      --hostname="es-{{ ansible_hostname }}" \
      --restart="always" \
      gitinsky/elasticsearch:latest
  when: es_config.changed or
        'No such image or container' in container_status.stderr or
        'No such image, container or task' in container_status.stderr or
        '"exited"' in container_status.stdout
  tags:
    - docker
    - es

- name: wait for valid state
  uri:
    url: http://127.0.0.1:9200/_cluster/health
    return_content: yes
    body_format: json
    status_code: 200
  register: es_cluster_health
  until: es_cluster_health.json.status is defined and es_cluster_health.json.status == 'green'
  delay: 10
  retries: 3600
  tags:
    - docker
    - es
